#include <stdio.h>
#include <string>

#include <atomic>
#include <memory>
#include <vector>

#include "lib/base.h"
#include "lib/ghost.h"

// A series of simple tests for ghOSt schedulers.

namespace ghost {
namespace {

struct ScopedTime {
  ScopedTime() { start = absl::Now(); }
  ~ScopedTime() {
    printf(" took %0.2f ms\n", absl::ToDoubleMilliseconds(absl::Now() - start));
  }
  absl::Time start;
};


int unoptimizableFunc(int numIters) {
  volatile int result = 0; // Using volatile to prevent optimization

  for (int i = 0; i < numIters; i+=17) {
      result += i * (i + std::rand() % 1000); // Performing some computation
  }

  return result;
}

double TaskDistribution(
  int task_count,
  std::vector<std::string>& taskDistributionList
  ) {
  std::vector<std::unique_ptr<ghost::GhostThread>> threads;
  threads.reserve(task_count);

  const int smallTaskNumIters = 2000000; // 2.3 ms
  const int largeTaskNumIters = smallTaskNumIters*100; // 230 ms

  if (task_count < 100 || task_count > 1000 || task_count % 100 != 0) {
        std::cout << "Invalid number of tasks. Should be a multiple of 100 between 100 and 1000." << std::endl;
        return -1;
    }

  int index = (task_count / 100) - 1;
  if (index < 0 || index >= taskDistributionList.size()) {
      std::cout << "Index out of range." << std::endl;
      return -1;
  }

  const std::string& currentString = taskDistributionList[index];
  std::vector<absl::Time> creationTime(task_count);
  std::vector<absl::Time> finishTime(task_count);
  std::vector<int> taskResult(task_count); // Just to prevent compiler optimizations

  int taskIdx = 0;

  for (char c : currentString) {
    int curTaskIdx = taskIdx; // to prevent same copy being shared across threads
    auto curTaskCreationTime = absl::Now();
    creationTime[curTaskIdx] = curTaskCreationTime;
    if (c == '1') {
        threads.emplace_back(new ghost::GhostThread(
            ghost::GhostThread::KernelScheduler::kGhost,
            [&, curTaskIdx]() {
                int result = unoptimizableFunc(smallTaskNumIters);
                taskResult[curTaskIdx] = result;
                finishTime[curTaskIdx] = absl::Now();
            }
        ));
    } else if (c == '0') {
        threads.emplace_back(new ghost::GhostThread(
            ghost::GhostThread::KernelScheduler::kGhost,
            [&, curTaskIdx]() {
                int result = unoptimizableFunc(largeTaskNumIters);
                taskResult[curTaskIdx] = result;
                finishTime[curTaskIdx] = absl::Now();
            }
        ));
    }
    taskIdx+=1;
}

  for (auto& t : threads) t->Join();

  double totalServiceTime = 0;

  for(int i=0; i<task_count; i++) {
    printf("Task: %d\n", i);
    printf("  creationTime: %0.2f ms\n", absl::ToDoubleMilliseconds(creationTime[i] - absl::UnixEpoch()));
    printf("  finishTime: %0.2f ms\n", absl::ToDoubleMilliseconds(finishTime[i] - absl::UnixEpoch()));
    printf("  serviceTime: %0.2f ms\n", absl::ToDoubleMilliseconds(finishTime[i] - creationTime[i]));
    if (currentString[i] == '1')
      printf("  approxBurstTime: 2 ms\n");
    else
      printf("  approxBurstTime: 200 ms\n");
    totalServiceTime += absl::ToDoubleMilliseconds(finishTime[i] - creationTime[i]);
  }

  return totalServiceTime;
}

}  // namespace
}  // namespace ghost

int main() {
  // {
  //   printf("HeavyFirst\n");
  //   ghost::ScopedTime time;
  //   ghost::TaskDistribution(10, 1000, 1000, 10);
  // }
  // {
  //   printf("Uniform\n");
  //   ghost::ScopedTime time;
  //   ghost::TaskDistribution(1000, 10, 1000, 10);
  // }
  std::vector<std::string> taskDistributionList;
  taskDistributionList.push_back("1111110111111101011010111111111100001001001111011111111110000011111111111100111111111001101111011111");
  taskDistributionList.push_back("11101101111111111111111111111111111111111111110111111001000101010001101011011111001011011011011100011111111110110101000011111010011111001110111100111111110111010011111111110111111011001111111100111111");
  taskDistributionList.push_back("110111001101101000001111111110111111100001101111111111111111110111111001001111001110001111110011111111111001110011101111000011110011011011001100010010111011101111111111111111110110110111111101101011111111101101101111011100111111101101111001101111111110111110010111111111111110110111111101111111111111");
  taskDistributionList.push_back("1111001111101011100111110011111111111101001111111101111111111110111111110111111111101111110010111110101111100111010111111111111101011000111111110110110101101110001111111000101111111111010111011111111111011101011010000010101110100111101111101101010111010100110111001111111110110110011111101111101111101111111110111101010111111111101111111101101110011011111101001111010011101101111110011111111000111111");
  taskDistributionList.push_back
  taskDistributionList.push_back
  taskDistributionList.push_back
  taskDistributionList.push_back("11011101111111111110111011011111111011111010011101111011111111110011101100111101101110111101110111001111011011111110111111011111110011110011111111101011110110111011111101110011000111010100011001110011111101111010111111111010111111001110111011011111111110011111111011101111011111100111010101110011111011111100101111101111111110111110111101110011110111101111011111101010011110011111110011111111011101111101111111011111110101011111111110110110110101111011101011010101110011101111000101111101111111110111010111011011001101111111000111111110111111011101111101111011110111110111110111101110001010011111111011111111000010111101101011111111110101010111101011100111111111011001011101101111110110111101011100101011110111011111110111111110110111111011010110101110011101111010111100111111011000111111111101111101");
  taskDistributionList.push_back
  taskDistributionList.push_back
  printf("DynamicVariedWorkload\n");
  auto totalServiceTime = ghost::TaskDistribution(1000, taskDistributionList);
  printf("TotalServiceTime: %0.2f ms\n", totalServiceTime);
}
